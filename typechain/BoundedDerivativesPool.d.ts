/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BoundedDerivativesPoolInterface extends ethers.utils.Interface {
  functions: {
    "BaseToken()": FunctionFragment;
    "TradeToken()": FunctionFragment;
    "baseBal()": FunctionFragment;
    "getTraderPosition()": FunctionFragment;
    "makerClaimClose(uint16,bool,address)": FunctionFragment;
    "makerClaimOpen(uint16,bool,address)": FunctionFragment;
    "makerClose(uint16,uint256,bool,address)": FunctionFragment;
    "makerOpen(uint16,uint256,bool,address)": FunctionFragment;
    "makerPartiallyClaim(uint16,bool,bool,address)": FunctionFragment;
    "makerReduceClose(uint16,uint256,bool,address)": FunctionFragment;
    "makerReduceOpen(uint16,uint256,bool,address)": FunctionFragment;
    "maxPrice()": FunctionFragment;
    "pool()": FunctionFragment;
    "provideLiquidity(uint16,uint16,uint128,bytes)": FunctionFragment;
    "s_tradeToken()": FunctionFragment;
    "takerClose(bool,int256,uint256,bytes)": FunctionFragment;
    "takerOpen(bool,int256,uint256,bytes)": FunctionFragment;
    "withdrawLiquidity(uint16,uint16,uint128,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BaseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TradeToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseBal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTraderPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makerClaimClose",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makerClaimOpen",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makerClose",
    values: [BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makerOpen",
    values: [BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makerPartiallyClaim",
    values: [BigNumberish, boolean, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makerReduceClose",
    values: [BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makerReduceOpen",
    values: [BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(functionFragment: "maxPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provideLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "s_tradeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takerClose",
    values: [boolean, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "takerOpen",
    values: [boolean, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "BaseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TradeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseBal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTraderPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerClaimClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerClaimOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makerClose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makerOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makerPartiallyClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerReduceClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerReduceOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_tradeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takerClose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takerOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;

  events: {};
}

export class BoundedDerivativesPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BoundedDerivativesPoolInterface;

  functions: {
    BaseToken(overrides?: CallOverrides): Promise<[string]>;

    "BaseToken()"(overrides?: CallOverrides): Promise<[string]>;

    TradeToken(overrides?: CallOverrides): Promise<[string]>;

    "TradeToken()"(overrides?: CallOverrides): Promise<[string]>;

    baseBal(overrides?: CallOverrides): Promise<[BigNumber]>;

    "baseBal()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTraderPosition(overrides?: CallOverrides): Promise<[void]>;

    "getTraderPosition()"(overrides?: CallOverrides): Promise<[void]>;

    makerClaimClose(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "makerClaimClose(uint16,bool,address)"(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makerClaimOpen(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "makerClaimOpen(uint16,bool,address)"(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makerClose(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "makerClose(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makerOpen(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "makerOpen(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makerPartiallyClaim(
      point: BigNumberish,
      isLong: boolean,
      open: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "makerPartiallyClaim(uint16,bool,bool,address)"(
      point: BigNumberish,
      isLong: boolean,
      open: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makerReduceClose(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "makerReduceClose(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makerReduceOpen(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "makerReduceOpen(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    "pool()"(overrides?: CallOverrides): Promise<[string]>;

    provideLiquidity(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "provideLiquidity(uint16,uint16,uint128,bytes)"(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    s_tradeToken(overrides?: CallOverrides): Promise<[string]>;

    "s_tradeToken()"(overrides?: CallOverrides): Promise<[string]>;

    takerClose(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "takerClose(bool,int256,uint256,bytes)"(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takerOpen(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "takerOpen(bool,int256,uint256,bytes)"(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidity(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawLiquidity(uint16,uint16,uint128,bytes)"(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BaseToken(overrides?: CallOverrides): Promise<string>;

  "BaseToken()"(overrides?: CallOverrides): Promise<string>;

  TradeToken(overrides?: CallOverrides): Promise<string>;

  "TradeToken()"(overrides?: CallOverrides): Promise<string>;

  baseBal(overrides?: CallOverrides): Promise<BigNumber>;

  "baseBal()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTraderPosition(overrides?: CallOverrides): Promise<void>;

  "getTraderPosition()"(overrides?: CallOverrides): Promise<void>;

  makerClaimClose(
    point: BigNumberish,
    isLong: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "makerClaimClose(uint16,bool,address)"(
    point: BigNumberish,
    isLong: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makerClaimOpen(
    point: BigNumberish,
    isLong: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "makerClaimOpen(uint16,bool,address)"(
    point: BigNumberish,
    isLong: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makerClose(
    point: BigNumberish,
    amount: BigNumberish,
    isLong: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "makerClose(uint16,uint256,bool,address)"(
    point: BigNumberish,
    amount: BigNumberish,
    isLong: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makerOpen(
    point: BigNumberish,
    amount: BigNumberish,
    isLong: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "makerOpen(uint16,uint256,bool,address)"(
    point: BigNumberish,
    amount: BigNumberish,
    isLong: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makerPartiallyClaim(
    point: BigNumberish,
    isLong: boolean,
    open: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "makerPartiallyClaim(uint16,bool,bool,address)"(
    point: BigNumberish,
    isLong: boolean,
    open: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makerReduceClose(
    point: BigNumberish,
    amount: BigNumberish,
    isLong: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "makerReduceClose(uint16,uint256,bool,address)"(
    point: BigNumberish,
    amount: BigNumberish,
    isLong: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makerReduceOpen(
    point: BigNumberish,
    amount: BigNumberish,
    isLong: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "makerReduceOpen(uint16,uint256,bool,address)"(
    point: BigNumberish,
    amount: BigNumberish,
    isLong: boolean,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "maxPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  provideLiquidity(
    pointLower: BigNumberish,
    pointUpper: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "provideLiquidity(uint16,uint16,uint128,bytes)"(
    pointLower: BigNumberish,
    pointUpper: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  s_tradeToken(overrides?: CallOverrides): Promise<string>;

  "s_tradeToken()"(overrides?: CallOverrides): Promise<string>;

  takerClose(
    isLong: boolean,
    amountIn: BigNumberish,
    priceLimit: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "takerClose(bool,int256,uint256,bytes)"(
    isLong: boolean,
    amountIn: BigNumberish,
    priceLimit: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takerOpen(
    isLong: boolean,
    amountIn: BigNumberish,
    priceLimit: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "takerOpen(bool,int256,uint256,bytes)"(
    isLong: boolean,
    amountIn: BigNumberish,
    priceLimit: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidity(
    pointLower: BigNumberish,
    pointUpper: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawLiquidity(uint16,uint16,uint128,bytes)"(
    pointLower: BigNumberish,
    pointUpper: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BaseToken(overrides?: CallOverrides): Promise<string>;

    "BaseToken()"(overrides?: CallOverrides): Promise<string>;

    TradeToken(overrides?: CallOverrides): Promise<string>;

    "TradeToken()"(overrides?: CallOverrides): Promise<string>;

    baseBal(overrides?: CallOverrides): Promise<BigNumber>;

    "baseBal()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTraderPosition(overrides?: CallOverrides): Promise<void>;

    "getTraderPosition()"(overrides?: CallOverrides): Promise<void>;

    makerClaimClose(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "makerClaimClose(uint16,bool,address)"(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerClaimOpen(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "makerClaimOpen(uint16,bool,address)"(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerClose(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { toEscrowAmount: BigNumber; crossId: BigNumber }
    >;

    "makerClose(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { toEscrowAmount: BigNumber; crossId: BigNumber }
    >;

    makerOpen(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { toEscrowAmount: BigNumber; crossId: BigNumber }
    >;

    "makerOpen(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { toEscrowAmount: BigNumber; crossId: BigNumber }
    >;

    makerPartiallyClaim(
      point: BigNumberish,
      isLong: boolean,
      open: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseAmount: BigNumber; tradeAmount: BigNumber }
    >;

    "makerPartiallyClaim(uint16,bool,bool,address)"(
      point: BigNumberish,
      isLong: boolean,
      open: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseAmount: BigNumber; tradeAmount: BigNumber }
    >;

    makerReduceClose(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "makerReduceClose(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    makerReduceOpen(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "makerReduceOpen(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    provideLiquidity(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "provideLiquidity(uint16,uint16,uint128,bytes)"(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    s_tradeToken(overrides?: CallOverrides): Promise<string>;

    "s_tradeToken()"(overrides?: CallOverrides): Promise<string>;

    takerClose(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        poolamountIn: BigNumber;
        poolamountOut: BigNumber;
      }
    >;

    "takerClose(bool,int256,uint256,bytes)"(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        poolamountIn: BigNumber;
        poolamountOut: BigNumber;
      }
    >;

    takerOpen(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        poolamountIn: BigNumber;
        poolamountOut: BigNumber;
      }
    >;

    "takerOpen(bool,int256,uint256,bytes)"(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        poolamountIn: BigNumber;
        poolamountOut: BigNumber;
      }
    >;

    withdrawLiquidity(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawLiquidity(uint16,uint16,uint128,bytes)"(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    BaseToken(overrides?: CallOverrides): Promise<BigNumber>;

    "BaseToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    TradeToken(overrides?: CallOverrides): Promise<BigNumber>;

    "TradeToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseBal(overrides?: CallOverrides): Promise<BigNumber>;

    "baseBal()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTraderPosition(overrides?: CallOverrides): Promise<BigNumber>;

    "getTraderPosition()"(overrides?: CallOverrides): Promise<BigNumber>;

    makerClaimClose(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "makerClaimClose(uint16,bool,address)"(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makerClaimOpen(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "makerClaimOpen(uint16,bool,address)"(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makerClose(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "makerClose(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makerOpen(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "makerOpen(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makerPartiallyClaim(
      point: BigNumberish,
      isLong: boolean,
      open: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "makerPartiallyClaim(uint16,bool,bool,address)"(
      point: BigNumberish,
      isLong: boolean,
      open: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makerReduceClose(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "makerReduceClose(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makerReduceOpen(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "makerReduceOpen(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "maxPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    provideLiquidity(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "provideLiquidity(uint16,uint16,uint128,bytes)"(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    s_tradeToken(overrides?: CallOverrides): Promise<BigNumber>;

    "s_tradeToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    takerClose(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "takerClose(bool,int256,uint256,bytes)"(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takerOpen(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "takerOpen(bool,int256,uint256,bytes)"(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLiquidity(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawLiquidity(uint16,uint16,uint128,bytes)"(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BaseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BaseToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TradeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TradeToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseBal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseBal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTraderPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTraderPosition()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makerClaimClose(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "makerClaimClose(uint16,bool,address)"(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makerClaimOpen(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "makerClaimOpen(uint16,bool,address)"(
      point: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makerClose(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "makerClose(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makerOpen(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "makerOpen(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makerPartiallyClaim(
      point: BigNumberish,
      isLong: boolean,
      open: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "makerPartiallyClaim(uint16,bool,bool,address)"(
      point: BigNumberish,
      isLong: boolean,
      open: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makerReduceClose(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "makerReduceClose(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makerReduceOpen(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "makerReduceOpen(uint16,uint256,bool,address)"(
      point: BigNumberish,
      amount: BigNumberish,
      isLong: boolean,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideLiquidity(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "provideLiquidity(uint16,uint16,uint128,bytes)"(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    s_tradeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "s_tradeToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takerClose(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "takerClose(bool,int256,uint256,bytes)"(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takerOpen(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "takerOpen(bool,int256,uint256,bytes)"(
      isLong: boolean,
      amountIn: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawLiquidity(uint16,uint16,uint128,bytes)"(
      pointLower: BigNumberish,
      pointUpper: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
