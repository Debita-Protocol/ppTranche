/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SplitterInterface extends ethers.utils.Interface {
  functions: {
    "computeImpliedPrices(uint256)": FunctionFragment;
    "computeValuePrices()": FunctionFragment;
    "computeValuePricesView()": FunctionFragment;
    "elapsedTime()": FunctionFragment;
    "escrowedVault()": FunctionFragment;
    "getSRP(uint256)": FunctionFragment;
    "getStoredValuePrices()": FunctionFragment;
    "getTrancheTokens()": FunctionFragment;
    "junior()": FunctionFragment;
    "junior_weight()": FunctionFragment;
    "lastRecordTime()": FunctionFragment;
    "merge(uint256)": FunctionFragment;
    "mergeFromMaster(uint256,uint256,address)": FunctionFragment;
    "pastNBlock()": FunctionFragment;
    "precision()": FunctionFragment;
    "promised_return()": FunctionFragment;
    "senior()": FunctionFragment;
    "setTokens()": FunctionFragment;
    "split(uint256)": FunctionFragment;
    "storeValuePrices()": FunctionFragment;
    "toggleDelayOracle()": FunctionFragment;
    "trancheMasterAd()": FunctionFragment;
    "trustedBurn(bool,address,uint256)": FunctionFragment;
    "underlying()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "computeImpliedPrices",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeValuePrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeValuePricesView",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "elapsedTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "escrowedVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSRP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStoredValuePrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrancheTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "junior", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "junior_weight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRecordTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "merge", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mergeFromMaster",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pastNBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "precision", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "promised_return",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "senior", values?: undefined): string;
  encodeFunctionData(functionFragment: "setTokens", values?: undefined): string;
  encodeFunctionData(functionFragment: "split", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "storeValuePrices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleDelayOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trancheMasterAd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trustedBurn",
    values: [boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "computeImpliedPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeValuePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeValuePricesView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "elapsedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowedVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSRP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStoredValuePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrancheTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "junior", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "junior_weight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRecordTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mergeFromMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pastNBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "precision", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "promised_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "senior", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeValuePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleDelayOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trancheMasterAd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;

  events: {};
}

export class Splitter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SplitterInterface;

  functions: {
    computeImpliedPrices(
      markPjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { psu: BigNumber; pju: BigNumber }>;

    "computeImpliedPrices(uint256)"(
      markPjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { psu: BigNumber; pju: BigNumber }>;

    computeValuePrices(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "computeValuePrices()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computeValuePricesView(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        psu: BigNumber;
        pju: BigNumber;
        pjs: BigNumber;
      }
    >;

    "computeValuePricesView()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        psu: BigNumber;
        pju: BigNumber;
        pjs: BigNumber;
      }
    >;

    elapsedTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "elapsedTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    escrowedVault(overrides?: CallOverrides): Promise<[BigNumber]>;

    "escrowedVault()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSRP(time: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSRP(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStoredValuePrices(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getStoredValuePrices()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getTrancheTokens(overrides?: CallOverrides): Promise<[string, string]>;

    "getTrancheTokens()"(overrides?: CallOverrides): Promise<[string, string]>;

    junior(overrides?: CallOverrides): Promise<[string]>;

    "junior()"(overrides?: CallOverrides): Promise<[string]>;

    junior_weight(overrides?: CallOverrides): Promise<[BigNumber]>;

    "junior_weight()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRecordTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastRecordTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    merge(
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "merge(uint256)"(
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mergeFromMaster(
      junior_amount: BigNumberish,
      senior_amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mergeFromMaster(uint256,uint256,address)"(
      junior_amount: BigNumberish,
      senior_amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pastNBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "pastNBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    precision(overrides?: CallOverrides): Promise<[BigNumber]>;

    "precision()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    promised_return(overrides?: CallOverrides): Promise<[BigNumber]>;

    "promised_return()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    senior(overrides?: CallOverrides): Promise<[string]>;

    "senior()"(overrides?: CallOverrides): Promise<[string]>;

    setTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTokens()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    split(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "split(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storeValuePrices(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "storeValuePrices()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleDelayOracle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleDelayOracle()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trancheMasterAd(overrides?: CallOverrides): Promise<[string]>;

    "trancheMasterAd()"(overrides?: CallOverrides): Promise<[string]>;

    trustedBurn(
      isSenior: boolean,
      who: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "trustedBurn(bool,address,uint256)"(
      isSenior: boolean,
      who: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    "underlying()"(overrides?: CallOverrides): Promise<[string]>;
  };

  computeImpliedPrices(
    markPjs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { psu: BigNumber; pju: BigNumber }>;

  "computeImpliedPrices(uint256)"(
    markPjs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { psu: BigNumber; pju: BigNumber }>;

  computeValuePrices(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "computeValuePrices()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computeValuePricesView(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      psu: BigNumber;
      pju: BigNumber;
      pjs: BigNumber;
    }
  >;

  "computeValuePricesView()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      psu: BigNumber;
      pju: BigNumber;
      pjs: BigNumber;
    }
  >;

  elapsedTime(overrides?: CallOverrides): Promise<BigNumber>;

  "elapsedTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  escrowedVault(overrides?: CallOverrides): Promise<BigNumber>;

  "escrowedVault()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSRP(time: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "getSRP(uint256)"(
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStoredValuePrices(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "getStoredValuePrices()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getTrancheTokens(overrides?: CallOverrides): Promise<[string, string]>;

  "getTrancheTokens()"(overrides?: CallOverrides): Promise<[string, string]>;

  junior(overrides?: CallOverrides): Promise<string>;

  "junior()"(overrides?: CallOverrides): Promise<string>;

  junior_weight(overrides?: CallOverrides): Promise<BigNumber>;

  "junior_weight()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastRecordTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastRecordTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  merge(
    junior_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "merge(uint256)"(
    junior_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mergeFromMaster(
    junior_amount: BigNumberish,
    senior_amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mergeFromMaster(uint256,uint256,address)"(
    junior_amount: BigNumberish,
    senior_amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pastNBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "pastNBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  precision(overrides?: CallOverrides): Promise<BigNumber>;

  "precision()"(overrides?: CallOverrides): Promise<BigNumber>;

  promised_return(overrides?: CallOverrides): Promise<BigNumber>;

  "promised_return()"(overrides?: CallOverrides): Promise<BigNumber>;

  senior(overrides?: CallOverrides): Promise<string>;

  "senior()"(overrides?: CallOverrides): Promise<string>;

  setTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTokens()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  split(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "split(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storeValuePrices(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "storeValuePrices()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleDelayOracle(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleDelayOracle()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trancheMasterAd(overrides?: CallOverrides): Promise<string>;

  "trancheMasterAd()"(overrides?: CallOverrides): Promise<string>;

  trustedBurn(
    isSenior: boolean,
    who: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "trustedBurn(bool,address,uint256)"(
    isSenior: boolean,
    who: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  "underlying()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    computeImpliedPrices(
      markPjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { psu: BigNumber; pju: BigNumber }>;

    "computeImpliedPrices(uint256)"(
      markPjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { psu: BigNumber; pju: BigNumber }>;

    computeValuePrices(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        psu: BigNumber;
        pju: BigNumber;
        pjs: BigNumber;
      }
    >;

    "computeValuePrices()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        psu: BigNumber;
        pju: BigNumber;
        pjs: BigNumber;
      }
    >;

    computeValuePricesView(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        psu: BigNumber;
        pju: BigNumber;
        pjs: BigNumber;
      }
    >;

    "computeValuePricesView()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        psu: BigNumber;
        pju: BigNumber;
        pjs: BigNumber;
      }
    >;

    elapsedTime(overrides?: CallOverrides): Promise<BigNumber>;

    "elapsedTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    escrowedVault(overrides?: CallOverrides): Promise<BigNumber>;

    "escrowedVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSRP(time: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getSRP(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStoredValuePrices(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getStoredValuePrices()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getTrancheTokens(overrides?: CallOverrides): Promise<[string, string]>;

    "getTrancheTokens()"(overrides?: CallOverrides): Promise<[string, string]>;

    junior(overrides?: CallOverrides): Promise<string>;

    "junior()"(overrides?: CallOverrides): Promise<string>;

    junior_weight(overrides?: CallOverrides): Promise<BigNumber>;

    "junior_weight()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRecordTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRecordTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    merge(
      junior_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "merge(uint256)"(
      junior_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mergeFromMaster(
      junior_amount: BigNumberish,
      senior_amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mergeFromMaster(uint256,uint256,address)"(
      junior_amount: BigNumberish,
      senior_amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pastNBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "pastNBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    precision(overrides?: CallOverrides): Promise<BigNumber>;

    "precision()"(overrides?: CallOverrides): Promise<BigNumber>;

    promised_return(overrides?: CallOverrides): Promise<BigNumber>;

    "promised_return()"(overrides?: CallOverrides): Promise<BigNumber>;

    senior(overrides?: CallOverrides): Promise<string>;

    "senior()"(overrides?: CallOverrides): Promise<string>;

    setTokens(overrides?: CallOverrides): Promise<void>;

    "setTokens()"(overrides?: CallOverrides): Promise<void>;

    split(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "split(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    storeValuePrices(overrides?: CallOverrides): Promise<void>;

    "storeValuePrices()"(overrides?: CallOverrides): Promise<void>;

    toggleDelayOracle(overrides?: CallOverrides): Promise<void>;

    "toggleDelayOracle()"(overrides?: CallOverrides): Promise<void>;

    trancheMasterAd(overrides?: CallOverrides): Promise<string>;

    "trancheMasterAd()"(overrides?: CallOverrides): Promise<string>;

    trustedBurn(
      isSenior: boolean,
      who: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "trustedBurn(bool,address,uint256)"(
      isSenior: boolean,
      who: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    "underlying()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    computeImpliedPrices(
      markPjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "computeImpliedPrices(uint256)"(
      markPjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeValuePrices(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "computeValuePrices()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computeValuePricesView(overrides?: CallOverrides): Promise<BigNumber>;

    "computeValuePricesView()"(overrides?: CallOverrides): Promise<BigNumber>;

    elapsedTime(overrides?: CallOverrides): Promise<BigNumber>;

    "elapsedTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    escrowedVault(overrides?: CallOverrides): Promise<BigNumber>;

    "escrowedVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSRP(time: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getSRP(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStoredValuePrices(overrides?: CallOverrides): Promise<BigNumber>;

    "getStoredValuePrices()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTrancheTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getTrancheTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    junior(overrides?: CallOverrides): Promise<BigNumber>;

    "junior()"(overrides?: CallOverrides): Promise<BigNumber>;

    junior_weight(overrides?: CallOverrides): Promise<BigNumber>;

    "junior_weight()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRecordTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRecordTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    merge(
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "merge(uint256)"(
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mergeFromMaster(
      junior_amount: BigNumberish,
      senior_amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mergeFromMaster(uint256,uint256,address)"(
      junior_amount: BigNumberish,
      senior_amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pastNBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "pastNBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    precision(overrides?: CallOverrides): Promise<BigNumber>;

    "precision()"(overrides?: CallOverrides): Promise<BigNumber>;

    promised_return(overrides?: CallOverrides): Promise<BigNumber>;

    "promised_return()"(overrides?: CallOverrides): Promise<BigNumber>;

    senior(overrides?: CallOverrides): Promise<BigNumber>;

    "senior()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTokens()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    split(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "split(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storeValuePrices(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "storeValuePrices()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleDelayOracle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleDelayOracle()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trancheMasterAd(overrides?: CallOverrides): Promise<BigNumber>;

    "trancheMasterAd()"(overrides?: CallOverrides): Promise<BigNumber>;

    trustedBurn(
      isSenior: boolean,
      who: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "trustedBurn(bool,address,uint256)"(
      isSenior: boolean,
      who: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    "underlying()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    computeImpliedPrices(
      markPjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeImpliedPrices(uint256)"(
      markPjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeValuePrices(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "computeValuePrices()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computeValuePricesView(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "computeValuePricesView()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    elapsedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "elapsedTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    escrowedVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "escrowedVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSRP(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSRP(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStoredValuePrices(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStoredValuePrices()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrancheTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTrancheTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    junior(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "junior()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    junior_weight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "junior_weight()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRecordTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastRecordTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merge(
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "merge(uint256)"(
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mergeFromMaster(
      junior_amount: BigNumberish,
      senior_amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mergeFromMaster(uint256,uint256,address)"(
      junior_amount: BigNumberish,
      senior_amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pastNBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pastNBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    precision(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "precision()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    promised_return(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "promised_return()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    senior(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "senior()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTokens()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    split(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "split(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storeValuePrices(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "storeValuePrices()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleDelayOracle(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleDelayOracle()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trancheMasterAd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trancheMasterAd()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trustedBurn(
      isSenior: boolean,
      who: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "trustedBurn(bool,address,uint256)"(
      isSenior: boolean,
      who: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlying()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
