/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { ChainlinkPriceOracle } from "../ChainlinkPriceOracle";

export class ChainlinkPriceOracle__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ChainlinkPriceOracle> {
    return super.deploy(overrides || {}) as Promise<ChainlinkPriceOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ChainlinkPriceOracle {
    return super.attach(address) as ChainlinkPriceOracle;
  }
  connect(signer: Signer): ChainlinkPriceOracle__factory {
    return super.connect(signer) as ChainlinkPriceOracle__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainlinkPriceOracle {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ChainlinkPriceOracle;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getLatestPrice",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b031916735f4ec3df9cbd43714fe2740f5e3616155c5b84191790556101db806100466000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638e15f47314610030575b600080fd5b61003861004a565b60405190815260200160405180910390f35b60008060008060008060008054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156100a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c8919061010b565b945094509450945094506305f5e100846100e2919061015b565b9550505050505090565b805169ffffffffffffffffffff8116811461010657600080fd5b919050565b600080600080600060a0868803121561012357600080fd5b61012c866100ec565b945060208601519350604086015192506060860151915061014f608087016100ec565b90509295509295909350565b60008261017857634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156101a057634e487b7160e01b600052601160045260246000fd5b50059056fea2646970667358221220ac5ec97b8e8daefcd4b889b448a92a296e4ed0494fc8b088872183298ea4627b64736f6c634300080a0033";
