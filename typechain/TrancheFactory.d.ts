/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TrancheFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createLendingPools(uint256)": FunctionFragment;
    "createParams(address,address[],uint256[],uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "createSplitterAndPool(uint256)": FunctionFragment;
    "createVault(tuple,string[],string)": FunctionFragment;
    "decreaseLPTokenBalance(address,uint256,uint256)": FunctionFragment;
    "getAmm(uint256)": FunctionFragment;
    "getCJunior(uint256)": FunctionFragment;
    "getCSenior(uint256)": FunctionFragment;
    "getContracts(uint256)": FunctionFragment;
    "getLPTokenBalance(address,uint256)": FunctionFragment;
    "getParams(uint256)": FunctionFragment;
    "getSplitter(uint256)": FunctionFragment;
    "getSuperVault(uint256)": FunctionFragment;
    "id()": FunctionFragment;
    "increaseLPTokenBalance(address,uint256,uint256)": FunctionFragment;
    "numVaults()": FunctionFragment;
    "setTrancheMaster(address)": FunctionFragment;
    "vaultContracts(uint256)": FunctionFragment;
    "vaultCreated(uint256)": FunctionFragment;
    "vaultIds(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createLendingPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createParams",
    values: [
      string,
      string[],
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createSplitterAndPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [
      {
        _want: string;
        _instruments: string[];
        _ratios: BigNumberish[];
        _junior_weight: BigNumberish;
        _promisedReturn: BigNumberish;
        _time_to_maturity: BigNumberish;
        vaultId: BigNumberish;
        inceptionPrice: BigNumberish;
      },
      string[],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLPTokenBalance",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmm",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCJunior",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCSenior",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLPTokenBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getParams",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSplitter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSuperVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseLPTokenBalance",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "numVaults", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTrancheMaster",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultCreated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vaultIds", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "createLendingPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSplitterAndPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLPTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAmm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCJunior", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCSenior", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLPTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuperVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLPTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTrancheMaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultIds", data: BytesLike): Result;

  events: {};
}

export class TrancheFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TrancheFactoryInterface;

  functions: {
    createLendingPools(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createLendingPools(uint256)"(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createParams(
      _want: string,
      _instruments: string[],
      _ratios: BigNumberish[],
      _junior_weight: BigNumberish,
      _promisedReturn: BigNumberish,
      _time_to_maturity: BigNumberish,
      vaultId: BigNumberish,
      inceptionPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createParams(address,address[],uint256[],uint256,uint256,uint256,uint256,uint256)"(
      _want: string,
      _instruments: string[],
      _ratios: BigNumberish[],
      _junior_weight: BigNumberish,
      _promisedReturn: BigNumberish,
      _time_to_maturity: BigNumberish,
      vaultId: BigNumberish,
      inceptionPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSplitterAndPool(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createSplitterAndPool(uint256)"(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createVault(
      params: {
        _want: string;
        _instruments: string[];
        _ratios: BigNumberish[];
        _junior_weight: BigNumberish;
        _promisedReturn: BigNumberish;
        _time_to_maturity: BigNumberish;
        vaultId: BigNumberish;
        inceptionPrice: BigNumberish;
      },
      names: string[],
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createVault((address,address[],uint256[],uint256,uint256,uint256,uint256,uint256),string[],string)"(
      params: {
        _want: string;
        _instruments: string[];
        _ratios: BigNumberish[];
        _junior_weight: BigNumberish;
        _promisedReturn: BigNumberish;
        _time_to_maturity: BigNumberish;
        vaultId: BigNumberish;
        inceptionPrice: BigNumberish;
      },
      names: string[],
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseLPTokenBalance(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseLPTokenBalance(address,uint256,uint256)"(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmm(vaultId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "getAmm(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCJunior(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCJunior(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCSenior(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCSenior(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getContracts(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          [
            string,
            string[],
            BigNumber[],
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            _want: string;
            _instruments: string[];
            _ratios: BigNumber[];
            _junior_weight: BigNumber;
            _promisedReturn: BigNumber;
            _time_to_maturity: BigNumber;
            vaultId: BigNumber;
            inceptionPrice: BigNumber;
          }
        ] & {
          vault: string;
          splitter: string;
          amm: string;
          lendingPool: string;
          cSenior: string;
          cJunior: string;
          param: [
            string,
            string[],
            BigNumber[],
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            _want: string;
            _instruments: string[];
            _ratios: BigNumber[];
            _junior_weight: BigNumber;
            _promisedReturn: BigNumber;
            _time_to_maturity: BigNumber;
            vaultId: BigNumber;
            inceptionPrice: BigNumber;
          };
        }
      ]
    >;

    "getContracts(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          [
            string,
            string[],
            BigNumber[],
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            _want: string;
            _instruments: string[];
            _ratios: BigNumber[];
            _junior_weight: BigNumber;
            _promisedReturn: BigNumber;
            _time_to_maturity: BigNumber;
            vaultId: BigNumber;
            inceptionPrice: BigNumber;
          }
        ] & {
          vault: string;
          splitter: string;
          amm: string;
          lendingPool: string;
          cSenior: string;
          cJunior: string;
          param: [
            string,
            string[],
            BigNumber[],
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            _want: string;
            _instruments: string[];
            _ratios: BigNumber[];
            _junior_weight: BigNumber;
            _promisedReturn: BigNumber;
            _time_to_maturity: BigNumber;
            vaultId: BigNumber;
            inceptionPrice: BigNumber;
          };
        }
      ]
    >;

    getLPTokenBalance(
      to: string,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLPTokenBalance(address,uint256)"(
      to: string,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getParams(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        }
      ]
    >;

    "getParams(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        }
      ]
    >;

    getSplitter(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getSplitter(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSuperVault(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getSuperVault(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    "id()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseLPTokenBalance(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseLPTokenBalance(address,uint256,uint256)"(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numVaults(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numVaults()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setTrancheMaster(
      _tMasterAd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTrancheMaster(address)"(
      _tMasterAd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        }
      ] & {
        vault: string;
        splitter: string;
        amm: string;
        lendingPool: string;
        cSenior: string;
        cJunior: string;
        param: [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        };
      }
    >;

    "vaultContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        }
      ] & {
        vault: string;
        splitter: string;
        amm: string;
        lendingPool: string;
        cSenior: string;
        cJunior: string;
        param: [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        };
      }
    >;

    vaultCreated(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "vaultCreated(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vaultIds(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    "vaultIds(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  createLendingPools(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createLendingPools(uint256)"(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createParams(
    _want: string,
    _instruments: string[],
    _ratios: BigNumberish[],
    _junior_weight: BigNumberish,
    _promisedReturn: BigNumberish,
    _time_to_maturity: BigNumberish,
    vaultId: BigNumberish,
    inceptionPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createParams(address,address[],uint256[],uint256,uint256,uint256,uint256,uint256)"(
    _want: string,
    _instruments: string[],
    _ratios: BigNumberish[],
    _junior_weight: BigNumberish,
    _promisedReturn: BigNumberish,
    _time_to_maturity: BigNumberish,
    vaultId: BigNumberish,
    inceptionPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSplitterAndPool(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createSplitterAndPool(uint256)"(
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createVault(
    params: {
      _want: string;
      _instruments: string[];
      _ratios: BigNumberish[];
      _junior_weight: BigNumberish;
      _promisedReturn: BigNumberish;
      _time_to_maturity: BigNumberish;
      vaultId: BigNumberish;
      inceptionPrice: BigNumberish;
    },
    names: string[],
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createVault((address,address[],uint256[],uint256,uint256,uint256,uint256,uint256),string[],string)"(
    params: {
      _want: string;
      _instruments: string[];
      _ratios: BigNumberish[];
      _junior_weight: BigNumberish;
      _promisedReturn: BigNumberish;
      _time_to_maturity: BigNumberish;
      vaultId: BigNumberish;
      inceptionPrice: BigNumberish;
    },
    names: string[],
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseLPTokenBalance(
    to: string,
    vaultId: BigNumberish,
    lpshares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseLPTokenBalance(address,uint256,uint256)"(
    to: string,
    vaultId: BigNumberish,
    lpshares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmm(vaultId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getAmm(uint256)"(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCJunior(vaultId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getCJunior(uint256)"(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCSenior(vaultId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getCSenior(uint256)"(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getContracts(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      string,
      [
        string,
        string[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _want: string;
        _instruments: string[];
        _ratios: BigNumber[];
        _junior_weight: BigNumber;
        _promisedReturn: BigNumber;
        _time_to_maturity: BigNumber;
        vaultId: BigNumber;
        inceptionPrice: BigNumber;
      }
    ] & {
      vault: string;
      splitter: string;
      amm: string;
      lendingPool: string;
      cSenior: string;
      cJunior: string;
      param: [
        string,
        string[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _want: string;
        _instruments: string[];
        _ratios: BigNumber[];
        _junior_weight: BigNumber;
        _promisedReturn: BigNumber;
        _time_to_maturity: BigNumber;
        vaultId: BigNumber;
        inceptionPrice: BigNumber;
      };
    }
  >;

  "getContracts(uint256)"(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      string,
      [
        string,
        string[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _want: string;
        _instruments: string[];
        _ratios: BigNumber[];
        _junior_weight: BigNumber;
        _promisedReturn: BigNumber;
        _time_to_maturity: BigNumber;
        vaultId: BigNumber;
        inceptionPrice: BigNumber;
      }
    ] & {
      vault: string;
      splitter: string;
      amm: string;
      lendingPool: string;
      cSenior: string;
      cJunior: string;
      param: [
        string,
        string[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _want: string;
        _instruments: string[];
        _ratios: BigNumber[];
        _junior_weight: BigNumber;
        _promisedReturn: BigNumber;
        _time_to_maturity: BigNumber;
        vaultId: BigNumber;
        inceptionPrice: BigNumber;
      };
    }
  >;

  getLPTokenBalance(
    to: string,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLPTokenBalance(address,uint256)"(
    to: string,
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getParams(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string[],
      BigNumber[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      _want: string;
      _instruments: string[];
      _ratios: BigNumber[];
      _junior_weight: BigNumber;
      _promisedReturn: BigNumber;
      _time_to_maturity: BigNumber;
      vaultId: BigNumber;
      inceptionPrice: BigNumber;
    }
  >;

  "getParams(uint256)"(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string[],
      BigNumber[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      _want: string;
      _instruments: string[];
      _ratios: BigNumber[];
      _junior_weight: BigNumber;
      _promisedReturn: BigNumber;
      _time_to_maturity: BigNumber;
      vaultId: BigNumber;
      inceptionPrice: BigNumber;
    }
  >;

  getSplitter(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getSplitter(uint256)"(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getSuperVault(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getSuperVault(uint256)"(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  "id()"(overrides?: CallOverrides): Promise<BigNumber>;

  increaseLPTokenBalance(
    to: string,
    vaultId: BigNumberish,
    lpshares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseLPTokenBalance(address,uint256,uint256)"(
    to: string,
    vaultId: BigNumberish,
    lpshares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numVaults(overrides?: CallOverrides): Promise<BigNumber>;

  "numVaults()"(overrides?: CallOverrides): Promise<BigNumber>;

  setTrancheMaster(
    _tMasterAd: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTrancheMaster(address)"(
    _tMasterAd: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultContracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      string,
      [
        string,
        string[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _want: string;
        _instruments: string[];
        _ratios: BigNumber[];
        _junior_weight: BigNumber;
        _promisedReturn: BigNumber;
        _time_to_maturity: BigNumber;
        vaultId: BigNumber;
        inceptionPrice: BigNumber;
      }
    ] & {
      vault: string;
      splitter: string;
      amm: string;
      lendingPool: string;
      cSenior: string;
      cJunior: string;
      param: [
        string,
        string[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _want: string;
        _instruments: string[];
        _ratios: BigNumber[];
        _junior_weight: BigNumber;
        _promisedReturn: BigNumber;
        _time_to_maturity: BigNumber;
        vaultId: BigNumber;
        inceptionPrice: BigNumber;
      };
    }
  >;

  "vaultContracts(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      string,
      [
        string,
        string[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _want: string;
        _instruments: string[];
        _ratios: BigNumber[];
        _junior_weight: BigNumber;
        _promisedReturn: BigNumber;
        _time_to_maturity: BigNumber;
        vaultId: BigNumber;
        inceptionPrice: BigNumber;
      }
    ] & {
      vault: string;
      splitter: string;
      amm: string;
      lendingPool: string;
      cSenior: string;
      cJunior: string;
      param: [
        string,
        string[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _want: string;
        _instruments: string[];
        _ratios: BigNumber[];
        _junior_weight: BigNumber;
        _promisedReturn: BigNumber;
        _time_to_maturity: BigNumber;
        vaultId: BigNumber;
        inceptionPrice: BigNumber;
      };
    }
  >;

  vaultCreated(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "vaultCreated(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vaultIds(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "vaultIds(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    createLendingPools(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createLendingPools(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createParams(
      _want: string,
      _instruments: string[],
      _ratios: BigNumberish[],
      _junior_weight: BigNumberish,
      _promisedReturn: BigNumberish,
      _time_to_maturity: BigNumberish,
      vaultId: BigNumberish,
      inceptionPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _want: string;
        _instruments: string[];
        _ratios: BigNumber[];
        _junior_weight: BigNumber;
        _promisedReturn: BigNumber;
        _time_to_maturity: BigNumber;
        vaultId: BigNumber;
        inceptionPrice: BigNumber;
      }
    >;

    "createParams(address,address[],uint256[],uint256,uint256,uint256,uint256,uint256)"(
      _want: string,
      _instruments: string[],
      _ratios: BigNumberish[],
      _junior_weight: BigNumberish,
      _promisedReturn: BigNumberish,
      _time_to_maturity: BigNumberish,
      vaultId: BigNumberish,
      inceptionPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _want: string;
        _instruments: string[];
        _ratios: BigNumber[];
        _junior_weight: BigNumber;
        _promisedReturn: BigNumber;
        _time_to_maturity: BigNumber;
        vaultId: BigNumber;
        inceptionPrice: BigNumber;
      }
    >;

    createSplitterAndPool(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createSplitterAndPool(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createVault(
      params: {
        _want: string;
        _instruments: string[];
        _ratios: BigNumberish[];
        _junior_weight: BigNumberish;
        _promisedReturn: BigNumberish;
        _time_to_maturity: BigNumberish;
        vaultId: BigNumberish;
        inceptionPrice: BigNumberish;
      },
      names: string[],
      _description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createVault((address,address[],uint256[],uint256,uint256,uint256,uint256,uint256),string[],string)"(
      params: {
        _want: string;
        _instruments: string[];
        _ratios: BigNumberish[];
        _junior_weight: BigNumberish;
        _promisedReturn: BigNumberish;
        _time_to_maturity: BigNumberish;
        vaultId: BigNumberish;
        inceptionPrice: BigNumberish;
      },
      names: string[],
      _description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseLPTokenBalance(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreaseLPTokenBalance(address,uint256,uint256)"(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmm(vaultId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getAmm(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCJunior(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCJunior(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCSenior(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCSenior(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getContracts(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        }
      ] & {
        vault: string;
        splitter: string;
        amm: string;
        lendingPool: string;
        cSenior: string;
        cJunior: string;
        param: [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        };
      }
    >;

    "getContracts(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        }
      ] & {
        vault: string;
        splitter: string;
        amm: string;
        lendingPool: string;
        cSenior: string;
        cJunior: string;
        param: [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        };
      }
    >;

    getLPTokenBalance(
      to: string,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLPTokenBalance(address,uint256)"(
      to: string,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParams(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _want: string;
        _instruments: string[];
        _ratios: BigNumber[];
        _junior_weight: BigNumber;
        _promisedReturn: BigNumber;
        _time_to_maturity: BigNumber;
        vaultId: BigNumber;
        inceptionPrice: BigNumber;
      }
    >;

    "getParams(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string[],
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _want: string;
        _instruments: string[];
        _ratios: BigNumber[];
        _junior_weight: BigNumber;
        _promisedReturn: BigNumber;
        _time_to_maturity: BigNumber;
        vaultId: BigNumber;
        inceptionPrice: BigNumber;
      }
    >;

    getSplitter(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getSplitter(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSuperVault(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getSuperVault(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    "id()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLPTokenBalance(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseLPTokenBalance(address,uint256,uint256)"(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    numVaults(overrides?: CallOverrides): Promise<BigNumber>;

    "numVaults()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTrancheMaster(
      _tMasterAd: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTrancheMaster(address)"(
      _tMasterAd: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        }
      ] & {
        vault: string;
        splitter: string;
        amm: string;
        lendingPool: string;
        cSenior: string;
        cJunior: string;
        param: [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        };
      }
    >;

    "vaultContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        }
      ] & {
        vault: string;
        splitter: string;
        amm: string;
        lendingPool: string;
        cSenior: string;
        cJunior: string;
        param: [
          string,
          string[],
          BigNumber[],
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          _want: string;
          _instruments: string[];
          _ratios: BigNumber[];
          _junior_weight: BigNumber;
          _promisedReturn: BigNumber;
          _time_to_maturity: BigNumber;
          vaultId: BigNumber;
          inceptionPrice: BigNumber;
        };
      }
    >;

    vaultCreated(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "vaultCreated(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vaultIds(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "vaultIds(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    createLendingPools(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createLendingPools(uint256)"(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createParams(
      _want: string,
      _instruments: string[],
      _ratios: BigNumberish[],
      _junior_weight: BigNumberish,
      _promisedReturn: BigNumberish,
      _time_to_maturity: BigNumberish,
      vaultId: BigNumberish,
      inceptionPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createParams(address,address[],uint256[],uint256,uint256,uint256,uint256,uint256)"(
      _want: string,
      _instruments: string[],
      _ratios: BigNumberish[],
      _junior_weight: BigNumberish,
      _promisedReturn: BigNumberish,
      _time_to_maturity: BigNumberish,
      vaultId: BigNumberish,
      inceptionPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSplitterAndPool(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createSplitterAndPool(uint256)"(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createVault(
      params: {
        _want: string;
        _instruments: string[];
        _ratios: BigNumberish[];
        _junior_weight: BigNumberish;
        _promisedReturn: BigNumberish;
        _time_to_maturity: BigNumberish;
        vaultId: BigNumberish;
        inceptionPrice: BigNumberish;
      },
      names: string[],
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createVault((address,address[],uint256[],uint256,uint256,uint256,uint256,uint256),string[],string)"(
      params: {
        _want: string;
        _instruments: string[];
        _ratios: BigNumberish[];
        _junior_weight: BigNumberish;
        _promisedReturn: BigNumberish;
        _time_to_maturity: BigNumberish;
        vaultId: BigNumberish;
        inceptionPrice: BigNumberish;
      },
      names: string[],
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseLPTokenBalance(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseLPTokenBalance(address,uint256,uint256)"(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmm(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAmm(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCJunior(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCJunior(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCSenior(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCSenior(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContracts(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContracts(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLPTokenBalance(
      to: string,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLPTokenBalance(address,uint256)"(
      to: string,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParams(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getParams(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSplitter(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSplitter(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSuperVault(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSuperVault(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    "id()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseLPTokenBalance(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseLPTokenBalance(address,uint256,uint256)"(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numVaults(overrides?: CallOverrides): Promise<BigNumber>;

    "numVaults()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTrancheMaster(
      _tMasterAd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTrancheMaster(address)"(
      _tMasterAd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vaultContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultCreated(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vaultCreated(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaultIds(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "vaultIds(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createLendingPools(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createLendingPools(uint256)"(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createParams(
      _want: string,
      _instruments: string[],
      _ratios: BigNumberish[],
      _junior_weight: BigNumberish,
      _promisedReturn: BigNumberish,
      _time_to_maturity: BigNumberish,
      vaultId: BigNumberish,
      inceptionPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createParams(address,address[],uint256[],uint256,uint256,uint256,uint256,uint256)"(
      _want: string,
      _instruments: string[],
      _ratios: BigNumberish[],
      _junior_weight: BigNumberish,
      _promisedReturn: BigNumberish,
      _time_to_maturity: BigNumberish,
      vaultId: BigNumberish,
      inceptionPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSplitterAndPool(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createSplitterAndPool(uint256)"(
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createVault(
      params: {
        _want: string;
        _instruments: string[];
        _ratios: BigNumberish[];
        _junior_weight: BigNumberish;
        _promisedReturn: BigNumberish;
        _time_to_maturity: BigNumberish;
        vaultId: BigNumberish;
        inceptionPrice: BigNumberish;
      },
      names: string[],
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createVault((address,address[],uint256[],uint256,uint256,uint256,uint256,uint256),string[],string)"(
      params: {
        _want: string;
        _instruments: string[];
        _ratios: BigNumberish[];
        _junior_weight: BigNumberish;
        _promisedReturn: BigNumberish;
        _time_to_maturity: BigNumberish;
        vaultId: BigNumberish;
        inceptionPrice: BigNumberish;
      },
      names: string[],
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseLPTokenBalance(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseLPTokenBalance(address,uint256,uint256)"(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmm(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAmm(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCJunior(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCJunior(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCSenior(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCSenior(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContracts(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContracts(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLPTokenBalance(
      to: string,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLPTokenBalance(address,uint256)"(
      to: string,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParams(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getParams(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSplitter(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSplitter(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSuperVault(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSuperVault(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "id()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseLPTokenBalance(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseLPTokenBalance(address,uint256,uint256)"(
      to: string,
      vaultId: BigNumberish,
      lpshares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numVaults()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setTrancheMaster(
      _tMasterAd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTrancheMaster(address)"(
      _tMasterAd: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vaultContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultCreated(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vaultCreated(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaultIds(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vaultIds(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
