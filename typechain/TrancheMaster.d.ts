/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TrancheMasterInterface extends ethers.utils.Interface {
  functions: {
    "SLIPPAGETOLERANCE()": FunctionFragment;
    "_swapFromInstrument(bool,uint256,uint256,uint256,bytes)": FunctionFragment;
    "_swapFromTranche(bool,int256,uint256,uint256,bytes)": FunctionFragment;
    "_swapToInstrument(bool,uint256,uint256,uint256,bytes)": FunctionFragment;
    "_swapToRatio(bool,uint256,uint256,uint256,bytes,tuple)": FunctionFragment;
    "arbByPairRedeem(bool,uint256)": FunctionFragment;
    "fillQueue(bool,uint256,uint256,uint256,bytes)": FunctionFragment;
    "freshTrancheNewOrder()": FunctionFragment;
    "getAMM(uint256)": FunctionFragment;
    "getAvailableDVaultLiq(uint256,uint256,bool)": FunctionFragment;
    "getDorc(uint256,uint256)": FunctionFragment;
    "getFee(uint256,uint256)": FunctionFragment;
    "getFreedVault(uint256,uint256,bool)": FunctionFragment;
    "getPTV(uint256,bool,uint256)": FunctionFragment;
    "getTrancheTokens(uint256)": FunctionFragment;
    "getdVaultBal(uint256,address,bool,uint256)": FunctionFragment;
    "leverageSwap()": FunctionFragment;
    "mergeAndRedeem(uint256,uint256)": FunctionFragment;
    "mergeTVault(uint256,uint256)": FunctionFragment;
    "mintAndSplit(uint256,uint256)": FunctionFragment;
    "mintTVault(uint256,uint256)": FunctionFragment;
    "redeemByDebtVault(uint256,uint256,bool,uint256)": FunctionFragment;
    "redeemFromDebtVault(uint256,uint256,uint256,bool)": FunctionFragment;
    "redeemTVault(uint256,uint256)": FunctionFragment;
    "redeemToDebtVault(uint256,bool,uint256)": FunctionFragment;
    "splitTVault(uint256,uint256)": FunctionFragment;
    "swapFromDebtVault(uint256,uint256,bool,uint256)": FunctionFragment;
    "swapFromInstrument()": FunctionFragment;
    "swapFromTranche()": FunctionFragment;
    "swapFromUnderlying(bool,uint256,uint256,uint256,bytes)": FunctionFragment;
    "unRedeemDebtVault(uint256,uint256,bool,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SLIPPAGETOLERANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_swapFromInstrument",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_swapFromTranche",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_swapToInstrument",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_swapToRatio",
    values: [
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      {
        amm: string;
        want: string;
        vault: string;
        splitter: string;
        senior: string;
        junior: string;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        juniorAmount: BigNumberish;
        seniorAmount: BigNumberish;
        junior_weight: BigNumberish;
        pTv: BigNumberish;
        requiredPair: BigNumberish;
        markpjs: BigNumberish;
        multiplier: BigNumberish;
        seniorSupply: BigNumberish;
        juniorSupply: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "arbByPairRedeem",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fillQueue",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freshTrancheNewOrder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAMM",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableDVaultLiq",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDorc",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreedVault",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPTV",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrancheTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getdVaultBal",
    values: [BigNumberish, string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leverageSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeAndRedeem",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mergeTVault",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndSplit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTVault",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemByDebtVault",
    values: [BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFromDebtVault",
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemTVault",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemToDebtVault",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "splitTVault",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFromDebtVault",
    values: [BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFromInstrument",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFromTranche",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFromUnderlying",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unRedeemDebtVault",
    values: [BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SLIPPAGETOLERANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_swapFromInstrument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_swapFromTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_swapToInstrument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_swapToRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbByPairRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillQueue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freshTrancheNewOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAMM", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableDVaultLiq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDorc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFreedVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPTV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTrancheTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getdVaultBal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leverageSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeAndRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeTVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemByDebtVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemFromDebtVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemTVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemToDebtVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitTVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFromDebtVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFromInstrument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFromTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFromUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unRedeemDebtVault",
    data: BytesLike
  ): Result;

  events: {};
}

export class TrancheMaster extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TrancheMasterInterface;

  functions: {
    SLIPPAGETOLERANCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SLIPPAGETOLERANCE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _swapFromInstrument(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_swapFromInstrument(bool,uint256,uint256,uint256,bytes)"(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _swapFromTranche(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_swapFromTranche(bool,int256,uint256,uint256,bytes)"(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _swapToInstrument(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_swapToInstrument(bool,uint256,uint256,uint256,bytes)"(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _swapToRatio(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      vars: {
        amm: string;
        want: string;
        vault: string;
        splitter: string;
        senior: string;
        junior: string;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        juniorAmount: BigNumberish;
        seniorAmount: BigNumberish;
        junior_weight: BigNumberish;
        pTv: BigNumberish;
        requiredPair: BigNumberish;
        markpjs: BigNumberish;
        multiplier: BigNumberish;
        seniorSupply: BigNumberish;
        juniorSupply: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "_swapToRatio(bool,uint256,uint256,uint256,bytes,(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      vars: {
        amm: string;
        want: string;
        vault: string;
        splitter: string;
        senior: string;
        junior: string;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        juniorAmount: BigNumberish;
        seniorAmount: BigNumberish;
        junior_weight: BigNumberish;
        pTv: BigNumberish;
        requiredPair: BigNumberish;
        markpjs: BigNumberish;
        multiplier: BigNumberish;
        seniorSupply: BigNumberish;
        juniorSupply: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arbByPairRedeem(
      senior: boolean,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "arbByPairRedeem(bool,uint256)"(
      senior: boolean,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillQueue(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fillQueue(bool,uint256,uint256,uint256,bytes)"(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freshTrancheNewOrder(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "freshTrancheNewOrder()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAMM(vaultId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "getAMM(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAvailableDVaultLiq(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getAvailableDVaultLiq(uint256,uint256,bool)"(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDorc(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    "getDorc(uint256,uint256)"(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getFee(
      p1: BigNumberish,
      p2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getFee(uint256,uint256)"(
      p1: BigNumberish,
      p2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFreedVault(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getFreedVault(uint256,uint256,bool)"(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPTV(
      pjs: BigNumberish,
      isSenior: boolean,
      junior_weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pTv: BigNumber }>;

    "getPTV(uint256,bool,uint256)"(
      pjs: BigNumberish,
      isSenior: boolean,
      junior_weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pTv: BigNumber }>;

    getTrancheTokens(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    "getTrancheTokens(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getdVaultBal(
      vaultId: BigNumberish,
      who: string,
      isSenior: boolean,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getdVaultBal(uint256,address,bool,uint256)"(
      vaultId: BigNumberish,
      who: string,
      isSenior: boolean,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    leverageSwap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "leverageSwap()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mergeAndRedeem(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mergeAndRedeem(uint256,uint256)"(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mergeTVault(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mergeTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintAndSplit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintAndSplit(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTVault(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemByDebtVault(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemByDebtVault(uint256,uint256,bool,uint256)"(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemFromDebtVault(
      dVaultAmount: BigNumberish,
      pjs: BigNumberish,
      vaultId: BigNumberish,
      isSenior: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemFromDebtVault(uint256,uint256,uint256,bool)"(
      dVaultAmount: BigNumberish,
      pjs: BigNumberish,
      vaultId: BigNumberish,
      isSenior: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemTVault(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemToDebtVault(
      amount: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemToDebtVault(uint256,bool,uint256)"(
      amount: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    splitTVault(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "splitTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFromDebtVault(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapFromDebtVault(uint256,uint256,bool,uint256)"(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFromInstrument(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapFromInstrument()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFromTranche(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapFromTranche()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFromUnderlying(
      wantSenior: boolean,
      amount: BigNumberish,
      vaultId: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapFromUnderlying(bool,uint256,uint256,uint256,bytes)"(
      wantSenior: boolean,
      amount: BigNumberish,
      vaultId: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unRedeemDebtVault(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unRedeemDebtVault(uint256,uint256,bool,uint256)"(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  SLIPPAGETOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

  "SLIPPAGETOLERANCE()"(overrides?: CallOverrides): Promise<BigNumber>;

  _swapFromInstrument(
    toJunior: boolean,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    vaultId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_swapFromInstrument(bool,uint256,uint256,uint256,bytes)"(
    toJunior: boolean,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    vaultId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _swapFromTranche(
    toJunior: boolean,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    vaultId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_swapFromTranche(bool,int256,uint256,uint256,bytes)"(
    toJunior: boolean,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    vaultId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _swapToInstrument(
    fromJunior: boolean,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    vaultId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_swapToInstrument(bool,uint256,uint256,uint256,bytes)"(
    fromJunior: boolean,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    vaultId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _swapToRatio(
    fromJunior: boolean,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    vaultId: BigNumberish,
    data: BytesLike,
    vars: {
      amm: string;
      want: string;
      vault: string;
      splitter: string;
      senior: string;
      junior: string;
      amountIn: BigNumberish;
      amountOut: BigNumberish;
      juniorAmount: BigNumberish;
      seniorAmount: BigNumberish;
      junior_weight: BigNumberish;
      pTv: BigNumberish;
      requiredPair: BigNumberish;
      markpjs: BigNumberish;
      multiplier: BigNumberish;
      seniorSupply: BigNumberish;
      juniorSupply: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "_swapToRatio(bool,uint256,uint256,uint256,bytes,(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
    fromJunior: boolean,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    vaultId: BigNumberish,
    data: BytesLike,
    vars: {
      amm: string;
      want: string;
      vault: string;
      splitter: string;
      senior: string;
      junior: string;
      amountIn: BigNumberish;
      amountOut: BigNumberish;
      juniorAmount: BigNumberish;
      seniorAmount: BigNumberish;
      junior_weight: BigNumberish;
      pTv: BigNumberish;
      requiredPair: BigNumberish;
      markpjs: BigNumberish;
      multiplier: BigNumberish;
      seniorSupply: BigNumberish;
      juniorSupply: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arbByPairRedeem(
    senior: boolean,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "arbByPairRedeem(bool,uint256)"(
    senior: boolean,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillQueue(
    fromJunior: boolean,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    vaultId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fillQueue(bool,uint256,uint256,uint256,bytes)"(
    fromJunior: boolean,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    vaultId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freshTrancheNewOrder(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "freshTrancheNewOrder()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAMM(vaultId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getAMM(uint256)"(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAvailableDVaultLiq(
    vaultId: BigNumberish,
    pjs: BigNumberish,
    isSenior: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAvailableDVaultLiq(uint256,uint256,bool)"(
    vaultId: BigNumberish,
    pjs: BigNumberish,
    isSenior: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDorc(
    vaultId: BigNumberish,
    pjs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  "getDorc(uint256,uint256)"(
    vaultId: BigNumberish,
    pjs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getFee(
    p1: BigNumberish,
    p2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFee(uint256,uint256)"(
    p1: BigNumberish,
    p2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFreedVault(
    vaultId: BigNumberish,
    pjs: BigNumberish,
    isSenior: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFreedVault(uint256,uint256,bool)"(
    vaultId: BigNumberish,
    pjs: BigNumberish,
    isSenior: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPTV(
    pjs: BigNumberish,
    isSenior: boolean,
    junior_weight: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPTV(uint256,bool,uint256)"(
    pjs: BigNumberish,
    isSenior: boolean,
    junior_weight: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTrancheTokens(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  "getTrancheTokens(uint256)"(
    vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  getdVaultBal(
    vaultId: BigNumberish,
    who: string,
    isSenior: boolean,
    pjs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getdVaultBal(uint256,address,bool,uint256)"(
    vaultId: BigNumberish,
    who: string,
    isSenior: boolean,
    pjs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  leverageSwap(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "leverageSwap()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mergeAndRedeem(
    vaultId: BigNumberish,
    junior_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mergeAndRedeem(uint256,uint256)"(
    vaultId: BigNumberish,
    junior_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mergeTVault(
    vaultId: BigNumberish,
    junior_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mergeTVault(uint256,uint256)"(
    vaultId: BigNumberish,
    junior_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintAndSplit(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintAndSplit(uint256,uint256)"(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintTVault(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintTVault(uint256,uint256)"(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemByDebtVault(
    amount: BigNumberish,
    pjs: BigNumberish,
    isSenior: boolean,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemByDebtVault(uint256,uint256,bool,uint256)"(
    amount: BigNumberish,
    pjs: BigNumberish,
    isSenior: boolean,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemFromDebtVault(
    dVaultAmount: BigNumberish,
    pjs: BigNumberish,
    vaultId: BigNumberish,
    isSenior: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemFromDebtVault(uint256,uint256,uint256,bool)"(
    dVaultAmount: BigNumberish,
    pjs: BigNumberish,
    vaultId: BigNumberish,
    isSenior: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemTVault(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemTVault(uint256,uint256)"(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemToDebtVault(
    amount: BigNumberish,
    isSenior: boolean,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemToDebtVault(uint256,bool,uint256)"(
    amount: BigNumberish,
    isSenior: boolean,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  splitTVault(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "splitTVault(uint256,uint256)"(
    vaultId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFromDebtVault(
    amount: BigNumberish,
    pjs: BigNumberish,
    isSenior: boolean,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapFromDebtVault(uint256,uint256,bool,uint256)"(
    amount: BigNumberish,
    pjs: BigNumberish,
    isSenior: boolean,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFromInstrument(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapFromInstrument()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFromTranche(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapFromTranche()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFromUnderlying(
    wantSenior: boolean,
    amount: BigNumberish,
    vaultId: BigNumberish,
    priceLimit: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapFromUnderlying(bool,uint256,uint256,uint256,bytes)"(
    wantSenior: boolean,
    amount: BigNumberish,
    vaultId: BigNumberish,
    priceLimit: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unRedeemDebtVault(
    amount: BigNumberish,
    pjs: BigNumberish,
    isSenior: boolean,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unRedeemDebtVault(uint256,uint256,bool,uint256)"(
    amount: BigNumberish,
    pjs: BigNumberish,
    isSenior: boolean,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    SLIPPAGETOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

    "SLIPPAGETOLERANCE()"(overrides?: CallOverrides): Promise<BigNumber>;

    _swapFromInstrument(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    "_swapFromInstrument(bool,uint256,uint256,uint256,bytes)"(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    _swapFromTranche(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    "_swapFromTranche(bool,int256,uint256,uint256,bytes)"(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    _swapToInstrument(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    "_swapToInstrument(bool,uint256,uint256,uint256,bytes)"(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    _swapToRatio(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      vars: {
        amm: string;
        want: string;
        vault: string;
        splitter: string;
        senior: string;
        junior: string;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        juniorAmount: BigNumberish;
        seniorAmount: BigNumberish;
        junior_weight: BigNumberish;
        pTv: BigNumberish;
        requiredPair: BigNumberish;
        markpjs: BigNumberish;
        multiplier: BigNumberish;
        seniorSupply: BigNumberish;
        juniorSupply: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "_swapToRatio(bool,uint256,uint256,uint256,bytes,(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      vars: {
        amm: string;
        want: string;
        vault: string;
        splitter: string;
        senior: string;
        junior: string;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        juniorAmount: BigNumberish;
        seniorAmount: BigNumberish;
        junior_weight: BigNumberish;
        pTv: BigNumberish;
        requiredPair: BigNumberish;
        markpjs: BigNumberish;
        multiplier: BigNumberish;
        seniorSupply: BigNumberish;
        juniorSupply: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    arbByPairRedeem(
      senior: boolean,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "arbByPairRedeem(bool,uint256)"(
      senior: boolean,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fillQueue(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    "fillQueue(bool,uint256,uint256,uint256,bytes)"(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    freshTrancheNewOrder(overrides?: CallOverrides): Promise<void>;

    "freshTrancheNewOrder()"(overrides?: CallOverrides): Promise<void>;

    getAMM(vaultId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getAMM(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAvailableDVaultLiq(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAvailableDVaultLiq(uint256,uint256,bool)"(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDorc(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    "getDorc(uint256,uint256)"(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getFee(
      p1: BigNumberish,
      p2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFee(uint256,uint256)"(
      p1: BigNumberish,
      p2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreedVault(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFreedVault(uint256,uint256,bool)"(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPTV(
      pjs: BigNumberish,
      isSenior: boolean,
      junior_weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPTV(uint256,bool,uint256)"(
      pjs: BigNumberish,
      isSenior: boolean,
      junior_weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrancheTokens(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    "getTrancheTokens(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getdVaultBal(
      vaultId: BigNumberish,
      who: string,
      isSenior: boolean,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getdVaultBal(uint256,address,bool,uint256)"(
      vaultId: BigNumberish,
      who: string,
      isSenior: boolean,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leverageSwap(overrides?: CallOverrides): Promise<void>;

    "leverageSwap()"(overrides?: CallOverrides): Promise<void>;

    mergeAndRedeem(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mergeAndRedeem(uint256,uint256)"(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mergeTVault(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mergeTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintAndSplit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "mintAndSplit(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    mintTVault(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemByDebtVault(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemByDebtVault(uint256,uint256,bool,uint256)"(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemFromDebtVault(
      dVaultAmount: BigNumberish,
      pjs: BigNumberish,
      vaultId: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemFromDebtVault(uint256,uint256,uint256,bool)"(
      dVaultAmount: BigNumberish,
      pjs: BigNumberish,
      vaultId: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemTVault(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeemTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemToDebtVault(
      amount: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "redeemToDebtVault(uint256,bool,uint256)"(
      amount: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    splitTVault(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "splitTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapFromDebtVault(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapFromDebtVault(uint256,uint256,bool,uint256)"(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapFromInstrument(overrides?: CallOverrides): Promise<void>;

    "swapFromInstrument()"(overrides?: CallOverrides): Promise<void>;

    swapFromTranche(overrides?: CallOverrides): Promise<void>;

    "swapFromTranche()"(overrides?: CallOverrides): Promise<void>;

    swapFromUnderlying(
      wantSenior: boolean,
      amount: BigNumberish,
      vaultId: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapFromUnderlying(bool,uint256,uint256,uint256,bytes)"(
      wantSenior: boolean,
      amount: BigNumberish,
      vaultId: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unRedeemDebtVault(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unRedeemDebtVault(uint256,uint256,bool,uint256)"(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    SLIPPAGETOLERANCE(overrides?: CallOverrides): Promise<BigNumber>;

    "SLIPPAGETOLERANCE()"(overrides?: CallOverrides): Promise<BigNumber>;

    _swapFromInstrument(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_swapFromInstrument(bool,uint256,uint256,uint256,bytes)"(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _swapFromTranche(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_swapFromTranche(bool,int256,uint256,uint256,bytes)"(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _swapToInstrument(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_swapToInstrument(bool,uint256,uint256,uint256,bytes)"(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _swapToRatio(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      vars: {
        amm: string;
        want: string;
        vault: string;
        splitter: string;
        senior: string;
        junior: string;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        juniorAmount: BigNumberish;
        seniorAmount: BigNumberish;
        junior_weight: BigNumberish;
        pTv: BigNumberish;
        requiredPair: BigNumberish;
        markpjs: BigNumberish;
        multiplier: BigNumberish;
        seniorSupply: BigNumberish;
        juniorSupply: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "_swapToRatio(bool,uint256,uint256,uint256,bytes,(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      vars: {
        amm: string;
        want: string;
        vault: string;
        splitter: string;
        senior: string;
        junior: string;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        juniorAmount: BigNumberish;
        seniorAmount: BigNumberish;
        junior_weight: BigNumberish;
        pTv: BigNumberish;
        requiredPair: BigNumberish;
        markpjs: BigNumberish;
        multiplier: BigNumberish;
        seniorSupply: BigNumberish;
        juniorSupply: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arbByPairRedeem(
      senior: boolean,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "arbByPairRedeem(bool,uint256)"(
      senior: boolean,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillQueue(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fillQueue(bool,uint256,uint256,uint256,bytes)"(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freshTrancheNewOrder(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "freshTrancheNewOrder()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAMM(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAMM(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableDVaultLiq(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAvailableDVaultLiq(uint256,uint256,bool)"(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDorc(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDorc(uint256,uint256)"(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFee(
      p1: BigNumberish,
      p2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFee(uint256,uint256)"(
      p1: BigNumberish,
      p2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreedVault(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFreedVault(uint256,uint256,bool)"(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPTV(
      pjs: BigNumberish,
      isSenior: boolean,
      junior_weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPTV(uint256,bool,uint256)"(
      pjs: BigNumberish,
      isSenior: boolean,
      junior_weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrancheTokens(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTrancheTokens(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getdVaultBal(
      vaultId: BigNumberish,
      who: string,
      isSenior: boolean,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getdVaultBal(uint256,address,bool,uint256)"(
      vaultId: BigNumberish,
      who: string,
      isSenior: boolean,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leverageSwap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "leverageSwap()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mergeAndRedeem(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mergeAndRedeem(uint256,uint256)"(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mergeTVault(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mergeTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintAndSplit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintAndSplit(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintTVault(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemByDebtVault(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemByDebtVault(uint256,uint256,bool,uint256)"(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemFromDebtVault(
      dVaultAmount: BigNumberish,
      pjs: BigNumberish,
      vaultId: BigNumberish,
      isSenior: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemFromDebtVault(uint256,uint256,uint256,bool)"(
      dVaultAmount: BigNumberish,
      pjs: BigNumberish,
      vaultId: BigNumberish,
      isSenior: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemTVault(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemToDebtVault(
      amount: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemToDebtVault(uint256,bool,uint256)"(
      amount: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    splitTVault(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "splitTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFromDebtVault(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapFromDebtVault(uint256,uint256,bool,uint256)"(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFromInstrument(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapFromInstrument()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFromTranche(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapFromTranche()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFromUnderlying(
      wantSenior: boolean,
      amount: BigNumberish,
      vaultId: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapFromUnderlying(bool,uint256,uint256,uint256,bytes)"(
      wantSenior: boolean,
      amount: BigNumberish,
      vaultId: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unRedeemDebtVault(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unRedeemDebtVault(uint256,uint256,bool,uint256)"(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SLIPPAGETOLERANCE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SLIPPAGETOLERANCE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _swapFromInstrument(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_swapFromInstrument(bool,uint256,uint256,uint256,bytes)"(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _swapFromTranche(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_swapFromTranche(bool,int256,uint256,uint256,bytes)"(
      toJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _swapToInstrument(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_swapToInstrument(bool,uint256,uint256,uint256,bytes)"(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _swapToRatio(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      vars: {
        amm: string;
        want: string;
        vault: string;
        splitter: string;
        senior: string;
        junior: string;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        juniorAmount: BigNumberish;
        seniorAmount: BigNumberish;
        junior_weight: BigNumberish;
        pTv: BigNumberish;
        requiredPair: BigNumberish;
        markpjs: BigNumberish;
        multiplier: BigNumberish;
        seniorSupply: BigNumberish;
        juniorSupply: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "_swapToRatio(bool,uint256,uint256,uint256,bytes,(address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      vars: {
        amm: string;
        want: string;
        vault: string;
        splitter: string;
        senior: string;
        junior: string;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        juniorAmount: BigNumberish;
        seniorAmount: BigNumberish;
        junior_weight: BigNumberish;
        pTv: BigNumberish;
        requiredPair: BigNumberish;
        markpjs: BigNumberish;
        multiplier: BigNumberish;
        seniorSupply: BigNumberish;
        juniorSupply: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arbByPairRedeem(
      senior: boolean,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "arbByPairRedeem(bool,uint256)"(
      senior: boolean,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillQueue(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fillQueue(bool,uint256,uint256,uint256,bytes)"(
      fromJunior: boolean,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      vaultId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freshTrancheNewOrder(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "freshTrancheNewOrder()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAMM(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAMM(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableDVaultLiq(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAvailableDVaultLiq(uint256,uint256,bool)"(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDorc(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDorc(uint256,uint256)"(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(
      p1: BigNumberish,
      p2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFee(uint256,uint256)"(
      p1: BigNumberish,
      p2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreedVault(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFreedVault(uint256,uint256,bool)"(
      vaultId: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPTV(
      pjs: BigNumberish,
      isSenior: boolean,
      junior_weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPTV(uint256,bool,uint256)"(
      pjs: BigNumberish,
      isSenior: boolean,
      junior_weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrancheTokens(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTrancheTokens(uint256)"(
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getdVaultBal(
      vaultId: BigNumberish,
      who: string,
      isSenior: boolean,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getdVaultBal(uint256,address,bool,uint256)"(
      vaultId: BigNumberish,
      who: string,
      isSenior: boolean,
      pjs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leverageSwap(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "leverageSwap()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mergeAndRedeem(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mergeAndRedeem(uint256,uint256)"(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mergeTVault(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mergeTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      junior_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintAndSplit(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintAndSplit(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintTVault(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemByDebtVault(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemByDebtVault(uint256,uint256,bool,uint256)"(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemFromDebtVault(
      dVaultAmount: BigNumberish,
      pjs: BigNumberish,
      vaultId: BigNumberish,
      isSenior: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemFromDebtVault(uint256,uint256,uint256,bool)"(
      dVaultAmount: BigNumberish,
      pjs: BigNumberish,
      vaultId: BigNumberish,
      isSenior: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemTVault(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemToDebtVault(
      amount: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemToDebtVault(uint256,bool,uint256)"(
      amount: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    splitTVault(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "splitTVault(uint256,uint256)"(
      vaultId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFromDebtVault(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapFromDebtVault(uint256,uint256,bool,uint256)"(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFromInstrument(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapFromInstrument()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFromTranche(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapFromTranche()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFromUnderlying(
      wantSenior: boolean,
      amount: BigNumberish,
      vaultId: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapFromUnderlying(bool,uint256,uint256,uint256,bytes)"(
      wantSenior: boolean,
      amount: BigNumberish,
      vaultId: BigNumberish,
      priceLimit: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unRedeemDebtVault(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unRedeemDebtVault(uint256,uint256,bool,uint256)"(
      amount: BigNumberish,
      pjs: BigNumberish,
      isSenior: boolean,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
