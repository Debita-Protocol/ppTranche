/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MultiRolesAuthorityInterface extends ethers.utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "canCall(address,address,bytes4)": FunctionFragment;
    "doesRoleHaveCapability(uint8,bytes4)": FunctionFragment;
    "doesUserHaveRole(address,uint8)": FunctionFragment;
    "getRolesWithCapability(bytes4)": FunctionFragment;
    "getTargetCustomAuthority(address)": FunctionFragment;
    "getUserRoles(address)": FunctionFragment;
    "isCapabilityPublic(bytes4)": FunctionFragment;
    "owner()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setNewAuthority(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setPublicCapability(bytes4,bool)": FunctionFragment;
    "setRoleCapability(uint8,bytes4,bool)": FunctionFragment;
    "setTargetCustomAuthority(address,address)": FunctionFragment;
    "setUserRole(address,uint8,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "canCall",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doesRoleHaveCapability",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "doesUserHaveRole",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRolesWithCapability",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetCustomAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCapabilityPublic",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewAuthority",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPublicCapability",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleCapability",
    values: [BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setTargetCustomAuthority",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserRole",
    values: [string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doesRoleHaveCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesUserHaveRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRolesWithCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetCustomAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCapabilityPublic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPublicCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleCapability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTargetCustomAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserRole",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address,address)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "PublicCapabilityUpdated(bytes4,bool)": EventFragment;
    "RoleCapabilityUpdated(uint8,bytes4,bool)": EventFragment;
    "TargetCustomAuthorityUpdated(address,address)": EventFragment;
    "UserRoleUpdated(address,uint8,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicCapabilityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleCapabilityUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TargetCustomAuthorityUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRoleUpdated"): EventFragment;
}

export class MultiRolesAuthority extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MultiRolesAuthorityInterface;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    "authority()"(overrides?: CallOverrides): Promise<[string]>;

    canCall(
      user: string,
      target: string,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "canCall(address,address,bytes4)"(
      user: string,
      target: string,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    doesRoleHaveCapability(
      role: BigNumberish,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "doesRoleHaveCapability(uint8,bytes4)"(
      role: BigNumberish,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    doesUserHaveRole(
      user: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "doesUserHaveRole(address,uint8)"(
      user: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRolesWithCapability(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRolesWithCapability(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTargetCustomAuthority(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getTargetCustomAuthority(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserRoles(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "getUserRoles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isCapabilityPublic(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isCapabilityPublic(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAuthority(address)"(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setNewAuthority(address)"(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicCapability(
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPublicCapability(bytes4,bool)"(
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoleCapability(
      role: BigNumberish,
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRoleCapability(uint8,bytes4,bool)"(
      role: BigNumberish,
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTargetCustomAuthority(
      target: string,
      customAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTargetCustomAuthority(address,address)"(
      target: string,
      customAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUserRole(
      user: string,
      role: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUserRole(address,uint8,bool)"(
      user: string,
      role: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  "authority()"(overrides?: CallOverrides): Promise<string>;

  canCall(
    user: string,
    target: string,
    functionSig: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "canCall(address,address,bytes4)"(
    user: string,
    target: string,
    functionSig: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  doesRoleHaveCapability(
    role: BigNumberish,
    functionSig: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "doesRoleHaveCapability(uint8,bytes4)"(
    role: BigNumberish,
    functionSig: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  doesUserHaveRole(
    user: string,
    role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "doesUserHaveRole(address,uint8)"(
    user: string,
    role: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRolesWithCapability(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRolesWithCapability(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getTargetCustomAuthority(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTargetCustomAuthority(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserRoles(arg0: string, overrides?: CallOverrides): Promise<string>;

  "getUserRoles(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isCapabilityPublic(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isCapabilityPublic(bytes4)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  setAuthority(
    newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAuthority(address)"(
    newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewAuthority(
    newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setNewAuthority(address)"(
    newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicCapability(
    functionSig: BytesLike,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPublicCapability(bytes4,bool)"(
    functionSig: BytesLike,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoleCapability(
    role: BigNumberish,
    functionSig: BytesLike,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRoleCapability(uint8,bytes4,bool)"(
    role: BigNumberish,
    functionSig: BytesLike,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTargetCustomAuthority(
    target: string,
    customAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTargetCustomAuthority(address,address)"(
    target: string,
    customAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUserRole(
    user: string,
    role: BigNumberish,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUserRole(address,uint8,bool)"(
    user: string,
    role: BigNumberish,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    "authority()"(overrides?: CallOverrides): Promise<string>;

    canCall(
      user: string,
      target: string,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "canCall(address,address,bytes4)"(
      user: string,
      target: string,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    doesRoleHaveCapability(
      role: BigNumberish,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "doesRoleHaveCapability(uint8,bytes4)"(
      role: BigNumberish,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    doesUserHaveRole(
      user: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "doesUserHaveRole(address,uint8)"(
      user: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRolesWithCapability(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRolesWithCapability(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getTargetCustomAuthority(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTargetCustomAuthority(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserRoles(arg0: string, overrides?: CallOverrides): Promise<string>;

    "getUserRoles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isCapabilityPublic(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isCapabilityPublic(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    setAuthority(
      newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuthority(address)"(
      newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewAuthority(
      newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setNewAuthority(address)"(
      newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicCapability(
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPublicCapability(bytes4,bool)"(
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoleCapability(
      role: BigNumberish,
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRoleCapability(uint8,bytes4,bool)"(
      role: BigNumberish,
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setTargetCustomAuthority(
      target: string,
      customAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTargetCustomAuthority(address,address)"(
      target: string,
      customAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserRole(
      user: string,
      role: BigNumberish,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUserRole(address,uint8,bool)"(
      user: string,
      role: BigNumberish,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AuthorityUpdated(
      user: string | null,
      newAuthority: string | null
    ): TypedEventFilter<
      [string, string],
      { user: string; newAuthority: string }
    >;

    OwnerUpdated(
      user: string | null,
      newOwner: string | null
    ): TypedEventFilter<[string, string], { user: string; newOwner: string }>;

    PublicCapabilityUpdated(
      functionSig: BytesLike | null,
      enabled: null
    ): TypedEventFilter<
      [string, boolean],
      { functionSig: string; enabled: boolean }
    >;

    RoleCapabilityUpdated(
      role: BigNumberish | null,
      functionSig: BytesLike | null,
      enabled: null
    ): TypedEventFilter<
      [number, string, boolean],
      { role: number; functionSig: string; enabled: boolean }
    >;

    TargetCustomAuthorityUpdated(
      target: string | null,
      authority: string | null
    ): TypedEventFilter<
      [string, string],
      { target: string; authority: string }
    >;

    UserRoleUpdated(
      user: string | null,
      role: BigNumberish | null,
      enabled: null
    ): TypedEventFilter<
      [string, number, boolean],
      { user: string; role: number; enabled: boolean }
    >;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    "authority()"(overrides?: CallOverrides): Promise<BigNumber>;

    canCall(
      user: string,
      target: string,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canCall(address,address,bytes4)"(
      user: string,
      target: string,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doesRoleHaveCapability(
      role: BigNumberish,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "doesRoleHaveCapability(uint8,bytes4)"(
      role: BigNumberish,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    doesUserHaveRole(
      user: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "doesUserHaveRole(address,uint8)"(
      user: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRolesWithCapability(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRolesWithCapability(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTargetCustomAuthority(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTargetCustomAuthority(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRoles(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserRoles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCapabilityPublic(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isCapabilityPublic(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAuthority(address)"(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setNewAuthority(address)"(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicCapability(
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPublicCapability(bytes4,bool)"(
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoleCapability(
      role: BigNumberish,
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRoleCapability(uint8,bytes4,bool)"(
      role: BigNumberish,
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTargetCustomAuthority(
      target: string,
      customAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTargetCustomAuthority(address,address)"(
      target: string,
      customAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUserRole(
      user: string,
      role: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUserRole(address,uint8,bool)"(
      user: string,
      role: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "authority()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canCall(
      user: string,
      target: string,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canCall(address,address,bytes4)"(
      user: string,
      target: string,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doesRoleHaveCapability(
      role: BigNumberish,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "doesRoleHaveCapability(uint8,bytes4)"(
      role: BigNumberish,
      functionSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    doesUserHaveRole(
      user: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "doesUserHaveRole(address,uint8)"(
      user: string,
      role: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRolesWithCapability(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRolesWithCapability(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetCustomAuthority(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTargetCustomAuthority(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRoles(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserRoles(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCapabilityPublic(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCapabilityPublic(bytes4)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAuthority(address)"(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewAuthority(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setNewAuthority(address)"(
      newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicCapability(
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPublicCapability(bytes4,bool)"(
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoleCapability(
      role: BigNumberish,
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRoleCapability(uint8,bytes4,bool)"(
      role: BigNumberish,
      functionSig: BytesLike,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTargetCustomAuthority(
      target: string,
      customAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTargetCustomAuthority(address,address)"(
      target: string,
      customAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUserRole(
      user: string,
      role: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUserRole(address,uint8,bool)"(
      user: string,
      role: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
